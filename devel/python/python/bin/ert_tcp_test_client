#!/usr/bin/env python
import sys
import socket
import json
import time
from   argparse import ArgumentParser

default_host = "localhost"
default_port = 2000


# This is a test client for the ert server. The client expects to get
# the name of json formatted files on the command line and will
# iterate through all the commands in the commandline files. An
# example of a command file is:
#
# ["INIT_SIMULATIONS" , 4 , "default" , "ELCO-target"]
# ["ADD_SIMULATION" , 0 , 0 , 0 , [["MULTFLT" , 0.15] , ["GRID_PARAMS" , 0.25 , 0.30]]]
# ["ADD_SIMULATION" , 0 , 1 , 1 , [["MULTFLT" , 0.15] , ["GRID_PARAMS" , 0.25 , 0.30]]]
# ["ADD_SIMULATION" , 1 , 0 , 2 , [["MULTFLT" , 0.15] , ["GRID_PARAMS" , 0.25 , 0.30]]]
# ["ADD_SIMULATION" , 1 , 1 , 3 , [["MULTFLT" , 0.15] , ["GRID_PARAMS" , 0.25 , 0.30]]]
# ["CLIENT" , "BLOCK"]
# ["INIT_SIMULATIONS" , 4 , "default" , "ELCO-target2"]
# ["ADD_SIMULATION" , 0 , 0 , 0 , [["MULTFLT" , 0.15] , ["GRID_PARAMS" , 0.25 , 0.30]]]
# ["ADD_SIMULATION" , 0 , 1 , 1 , [["MULTFLT" , 0.15] , ["GRID_PARAMS" , 0.25 , 0.30]]]
# ["ADD_SIMULATION" , 1 , 0 , 2 , [["MULTFLT" , 0.15] , ["GRID_PARAMS" , 0.25 , 0.30]]]
# ["ADD_SIMULATION" , 1 , 1 , 3 , [["MULTFLT" , 0.15] , ["GRID_PARAMS" , 0.25 , 0.30]]]
# ["CLIENT" , "BLOCK"]
# ["QUIT"]
#
# By default it will connect to the default host and port combination
# given above, but you can specify a different host:port combination
# with --host=hostname:port


class Connection(object):
    def __init__(self , port , host):
        self.socket = socket.socket( socket.AF_INET , socket.SOCK_STREAM)
        self.port = port
        self.host = host
        self.socket.setblocking(1)
        try:
            self.socket.connect((self.host , self.port))
        except socket.error:
            sys.exit("Failed to connect to port:%d at %s." % (port , host))


    def sendRecv(self , data):
        self.socket.sendall( json.dumps(data) + "\n" )
        recv = self.socket.recv(1024)
        return json.loads(recv)


    @staticmethod
    def runCommand( cmd , port , host):
        conn = Connection( port , host )
        return conn.sendRecv( cmd )





def runClient(args):
    if args[0] == "BLOCK":
        block_while_running()
    else:
        raise Exception("Unkown client sub command:%s" % args[0])


def runJsonFile(filename , port , host):
    with open(filename) as fileH:
        for json_cmd in fileH.readlines():
            json_cmd = json_cmd.strip()
            if json_cmd:
                try:
                    cmd = json.loads( json_cmd )
                    if cmd[0] == "CLIENT":
                        runClient( cmd[1:] )
                    else:
                        print "Sending: %s" % cmd
                        result = Connection.runCommand( cmd , port , host )
                        print "Result:  %s" % result
                        print
                except ValueError,e:
                    print "The line:%s was not valid json. Error:%s" % (json_cmd , e)
            


def block_while_running():
    while True:
        tmp = Connection.runCommand( ["STATUS"] , port , host )
        result = str(tmp[0])
        if result == "COMPLETE":
            break

        time.sleep( 3 )
        
        

#-----------------------------------------------------------------

parser = ArgumentParser()
parser.add_argument("--host" , 
                    dest = "host",
                    default = "%s:%s" % (default_host , default_port),
                    help = "Host:port to connect to")
parser.add_argument("command_files" , nargs="+") 

options = parser.parse_args()
host , port = options.host.split(":")
port = int(port)

for json_file in options.command_files:
    runJsonFile( json_file , port , host )

